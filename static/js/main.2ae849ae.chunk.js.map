{"version":3,"sources":["utils/graph_queries.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUERY_USER","gql","App","useQuery","loading","error","data","useState","user","setUser","useEffect","fetchUser","className","username","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"uPAEaA,EAAaC,YAAH,wW,OCoCRC,MAhCf,WACE,MAAiCC,YAASH,GAAlCI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA0BC,mBAAsB,MAAhD,mBAAQC,EAAR,KAAcC,EAAd,KAQA,OANAC,qBAAU,YACHN,GAAWE,GACdG,EAAQH,EAAKK,aAEd,CAACL,EAAMF,IAENA,EACK,yCAGLC,EACK,6BAAMA,IAIb,qBAAKO,UAAU,MAAf,SACE,yBAAQA,UAAU,SAAlB,UACE,wCACEJ,GAAQ,0CAAcA,EAAKK,YAC7B,sBAAKD,UAAU,MAAf,UACE,2CACA,kDCjBKE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCERQ,EAAS,IAAIC,IAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGFS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.2ae849ae.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const QUERY_USER = gql`\nquery fetchUser {\n    fetchUser {\n      username\n\n      moods {\n        id\n        description\n        mood\n        createdAt\n      }\n\n      habitEntries {\n        id\n        date\n        habitId\n        status\n      }\n\n      journalEntries {\n        id\n        content\n        date\n      }      \n    }\n  }\n`\n","import { useState, useEffect } from 'react';\nimport { useQuery } from \"@apollo/client\";\nimport './App.css';\nimport { QUERY_USER } from './utils/graph_queries';\nimport { User } from './utils/Models'\n\nfunction App() {\n  const { loading, error, data } = useQuery(QUERY_USER)\n  const [ user, setUser ] = useState<User | null>(null)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUser(data.fetchUser)\n    }\n  }, [data, loading])\n\n  if (loading) {\n   return  <h2>Loading</h2>\n  }\n\n  if (error) {\n    return <h2>{ error }</h2>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>GlowUp</h1>\n        { user && <h2>Welcome { user.username }</h2>}\n        <nav className=\"nav\">\n          <h2>Dashboard</h2>\n          <h2>Journal</h2>\n        </nav>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3001/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}