{"version":3,"sources":["utils/graph_queries.js","utils/graph_mutations.js","components/MoodForm/MoodForm.tsx","utils/context.tsx","components/HabitCard/HabitCard.tsx","assets/icons/habit7-uncheck.png","components/HabitForm/HabitForm.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUERY_USER","gql","QUERY_HABITS","SUBMIT_MOOD","SUBMIT_HABIT","MoodForm","useState","mood","setMood","description","setDescription","validateForm","setValidateForm","useMutation","createMood","className","onSubmit","e","preventDefault","variables","parseInt","type","name","id","value","onChange","currentTarget","checked","htmlFor","placeholder","AppContext","createContext","userHabits","checkedHabitIds","setUserHabits","setCheckedHabitIds","ContextProvider","children","Provider","HabitCard","props","useContext","includes","setChecked","backgroundColor","color","style","setStyle","onClick","filtered","filter","ele","HabitForm","useQuery","error","data","createHabitEntry","entryParams","map","length","idArr","alert","fetchHabits","habit","App","loading","user","setUser","useEffect","fetchUser","username","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2aef2cae.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const QUERY_USER = gql`\n  query fetchUser {\n    fetchUser {\n      username\n\n      moods {\n        id\n        description\n        mood\n        createdAt\n      }\n\n      habitEntries {\n        id\n        date\n        habitId\n        status\n      }\n\n      journalEntries {\n        id\n        content\n        date\n      }\n    }\n  }\n`\nexport const QUERY_HABITS = gql`\n  query fetchHabits {\n    fetchHabits {\n      id\n      name\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\nexport const SUBMIT_MOOD = gql`\n  mutation createMood($mood: Int!, $description: String) {\n    createMood(input: { params: { mood: $mood, description: $description } }) {\n      user {\n        id\n      }\n    }\n  }\n`\n//mfer this one's input type got me ;/ aaahhhhhhh!\nexport const SUBMIT_HABIT = gql`\n  mutation addHabitEntries($idArr: [HabitEntryInput!]!) {\n    createHabitEntry(input: { params: $idArr }) {\n      user {\n        habitEntries {\n          habitId\n          status\n          date\n        }\n      }\n    }\n  }\n`\n","import './MoodForm.css';\nimport { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { SUBMIT_MOOD } from '../../utils/graph_mutations';\n\nconst MoodForm = () => {\n  const [ mood, setMood ] = useState('')\n  const [ description, setDescription ] = useState('')\n  const [ validateForm, setValidateForm ] = useState(true)\n  const [ createMood ] = useMutation(SUBMIT_MOOD)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!mood) {\n      setValidateForm(false)\n    } else {\n      createMood({ variables: { mood: parseInt(mood), description: description }})\n\n      setValidateForm(true)\n      setMood('');\n      setDescription('');\n    }\n  }\n\n  return (\n    <section className=\"mood-form-container\">\n      <form className=\"mood-form\" onSubmit={ handleSubmit }>\n        <h2>\n          How are you feeling today?\n        </h2>\n        <div className=\"moods-container\">\n          <input\n            type=\"radio\"\n            aria-label=\"strongly negative\"\n            name=\"mood\"\n            id=\"strongly-negative\"\n            value=\"0\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"0\" }\n          />\n          <label\n            htmlFor=\"strongly-negative\"\n            className=\"mood-label\"\n          >\n            😭\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"negative\"\n            name=\"mood\"\n            id=\"negative\"\n            value=\"1\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"1\" }\n          />\n          <label\n            htmlFor=\"negative\"\n            className=\"mood-label\"\n          >\n            🙁\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"neutral\"\n            name=\"mood\"\n            id=\"neutral\"\n            value=\"2\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"2\" }\n          />\n          <label\n            htmlFor=\"neutral\"\n            className=\"mood-label\"\n          >\n            😐\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"positive\"\n            name=\"mood\"\n            id=\"positive\"\n            value=\"3\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"3\" }\n          />\n          <label\n            htmlFor=\"positive\"\n            className=\"mood-label\"\n          >\n            🙂\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"strongly positive\"\n            name=\"mood\"\n            id=\"strongly-positive\"\n            value=\"4\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"4\" }\n          />\n          <label\n            htmlFor=\"strongly-positive\"\n            className=\"mood-label\"\n          >\n            😁\n          </label>\n        </div>\n        { !validateForm &&\n          <p className=\"error-message\">\n            **Please select your mood today!**\n          </p>\n        }\n        <input\n          type=\"text\"\n          placeholder=\"Today, I am feeling...\"\n          className=\"mood-description\"\n          value={ description }\n          onChange={ e => setDescription(e.currentTarget.value) }\n        />\n        <button className=\"mood-submit-button\" type=\"submit\">Submit</button>\n      </form>\n    </section>\n  )\n}\n\nexport default MoodForm;\n","import React, { createContext, useState } from \"react\"\nimport { Habit } from \"./Models\"\n\ninterface ContextState {\n  userHabits: Habit[]\n  checkedHabitIds: number[]\n  setUserHabits: (habits: Habit[]) => void\n  setCheckedHabitIds: (habitIds: number[]) => void\n}\n\nconst AppContext = createContext<ContextState>({\n  userHabits: [],\n  checkedHabitIds: [],\n  setUserHabits: () => {},\n  setCheckedHabitIds: () => {},\n})\n\nconst ContextProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [userHabits, setUserHabits] = useState<Habit[]>([])\n  const [checkedHabitIds, setCheckedHabitIds] = useState<number[]>([])\n\n  return (\n    <AppContext.Provider value={{ userHabits, setUserHabits, checkedHabitIds, setCheckedHabitIds }}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport { AppContext, ContextProvider }\n","import \"./HabitCard.css\"\nimport { useState, useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\n\ninterface HabitCardProps {\n  name: string\n  id: string\n}\n\nexport default function HabitCard(props: HabitCardProps) {\n  const { checkedHabitIds, setCheckedHabitIds } = useContext(AppContext)\n  const [checked, setChecked] = useState(checkedHabitIds.includes(parseInt(props.id)))\n  const [style, setStyle] = useState({\n    backgroundColor: \"#e4dfdd\",\n    color: \"black\",\n  })\n\n  const toggleCheck = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    switch (checked) {\n      case false:\n        setChecked(true)\n        setCheckedHabitIds([...checkedHabitIds, parseInt(e.currentTarget.id)])\n        setStyle({ backgroundColor: \"#4a5582\", color: \"#fff\" })\n        break\n\n      case true:\n        setChecked(false)\n        let filtered = checkedHabitIds.filter(ele => ele !== parseInt(e.currentTarget.id))\n        setCheckedHabitIds(filtered)\n        setStyle({ backgroundColor: \"#e4dfdd\", color: \"black\" })\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <button className=\"habit-card-button\" onClick={toggleCheck} id={props.id} style={style}>\n      {props.name}\n    </button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/habit7-uncheck.d30420f0.png\";","import \"./HabitForm.css\"\nimport { AppContext } from \"../../utils/context\"\nimport { QUERY_HABITS } from \"../../utils/graph_queries\"\nimport { SUBMIT_HABIT } from \"../../utils/graph_mutations\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { useContext } from \"react\"\nimport HabitCard from \"../HabitCard/HabitCard\"\nimport \"../../assets/icons/habit7-uncheck.png\"\nimport { Habit } from \"../../utils/Models\"\n\nconst HabitForm = () => {\n  const { error, data } = useQuery(QUERY_HABITS)\n  const { checkedHabitIds } = useContext(AppContext)\n  const [createHabitEntry] = useMutation(SUBMIT_HABIT)\n\n  const createHabitEntries = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const entryParams = checkedHabitIds.map(ele => ({ id: ele }))\n    if (!entryParams.length) {\n      alert(\"You have not selected any habit\")\n    } else {\n      createHabitEntry({ variables: { idArr: entryParams } })\n      alert(\"Great job\")\n    }\n  }\n\n  return (\n    <section className=\"habit-form-container\">\n      <h2 className=\"habit-form-question\">What have you accomplished?</h2>\n      {data ? (\n        <form className=\"habit-form\" onSubmit={createHabitEntries}>\n          {data.fetchHabits.map((habit: Habit) => (\n            <HabitCard name={habit.name} id={habit.id} key={habit.id} />\n          ))}\n          <button className=\"habit-submit-button\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      ) : (\n        <h2>{error}</h2>\n      )}\n    </section>\n  )\n}\n\nexport default HabitForm\n","import { useState, useEffect } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport \"./App.css\"\nimport { QUERY_USER } from \"../../utils/graph_queries\"\nimport { User } from \"../../utils/Models\"\nimport MoodForm from \"../MoodForm/MoodForm\"\nimport HabitForm from \"../HabitForm/HabitForm\"\n\nfunction App() {\n  const { loading, error, data } = useQuery(QUERY_USER)\n\n  const [user, setUser] = useState<User | null>(null)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUser(data.fetchUser)\n    }\n  }, [data, loading])\n\n  if (loading) {\n    return <h2>Loading</h2>\n  }\n\n  if (error) {\n    return <h2>{error}</h2>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>GlowUp</h1>\n        {user && <h2>Welcome {user.username}</h2>}\n        <nav className=\"nav\">\n          <h2>Dashboard</h2>\n          <h2>Journal</h2>\n        </nav>\n      </header>\n      <MoodForm />\n      <HabitForm />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App/App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\nimport { ContextProvider } from \"./utils/context\"\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:3001/graphql\",\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <ContextProvider>\n        <App />\n      </ContextProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}