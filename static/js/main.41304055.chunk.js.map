{"version":3,"sources":["utils/graph_queries.js","utils/graph_mutations.js","components/MoodForm/MoodForm.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUERY_USER","gql","SUBMIT_MOOD","MoodForm","useState","mood","setMood","description","setDescription","validateForm","setValidateForm","useMutation","createMood","className","onSubmit","e","preventDefault","variables","parseInt","type","name","id","value","onChange","currentTarget","checked","htmlFor","placeholder","App","useQuery","loading","error","data","user","setUser","useEffect","fetchUser","username","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.41304055.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const QUERY_USER = gql`\nquery fetchUser {\n    fetchUser {\n      username\n\n      moods {\n        id\n        description\n        mood\n        createdAt\n      }\n\n      habitEntries {\n        id\n        date\n        habitId\n        status\n      }\n\n      journalEntries {\n        id\n        content\n        date\n      }      \n    }\n  }\n`\n","import { gql } from '@apollo/client';\n\nexport const SUBMIT_MOOD = gql`\nmutation createMood($mood: Int!, $description: String) {\n  createMood(\n    input: {\n      params: {\n        mood: $mood,\n        description: $description\n      }\n    }\n  ) {\n    user {\n      id\n    }\n  }\n}\n`\n","import './MoodForm.css';\nimport { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { SUBMIT_MOOD } from '../../utils/graph_mutations';\n\nconst MoodForm = () => {\n  const [ mood, setMood ] = useState('')\n  const [ description, setDescription ] = useState('')\n  const [ validateForm, setValidateForm ] = useState(true)\n  const [ createMood ] = useMutation(SUBMIT_MOOD)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!mood) {\n      setValidateForm(false)\n    } else {\n      createMood({ variables: { mood: parseInt(mood), description: description }})\n\n      setValidateForm(true)\n      setMood('');\n      setDescription('');\n    }\n  }\n\n  return (\n    <section className=\"mood-form-container\">\n      <form className=\"mood-form\" onSubmit={ handleSubmit }>\n        <h2>\n          How are you feeling today?\n        </h2>\n        <div className=\"moods-container\">\n          <input\n            type=\"radio\"\n            aria-label=\"strongly negative\"\n            name=\"mood\"\n            id=\"strongly-negative\"\n            value=\"0\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"0\" }\n          />\n          <label\n            htmlFor=\"strongly-negative\"\n            className=\"mood-label\"\n          >\n            üò≠\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"negative\"\n            name=\"mood\"\n            id=\"negative\"\n            value=\"1\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"1\" }\n          />\n          <label\n            htmlFor=\"negative\"\n            className=\"mood-label\"\n          >\n            üôÅ\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"neutral\"\n            name=\"mood\"\n            id=\"neutral\"\n            value=\"2\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"2\" }\n          />\n          <label\n            htmlFor=\"neutral\"\n            className=\"mood-label\"\n          >\n            üòê\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"positive\"\n            name=\"mood\"\n            id=\"positive\"\n            value=\"3\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"3\" }\n          />\n          <label\n            htmlFor=\"positive\"\n            className=\"mood-label\"\n          >\n            üôÇ\n          </label>\n          <input\n            type=\"radio\"\n            aria-label=\"strongly positive\"\n            name=\"mood\"\n            id=\"strongly-positive\"\n            value=\"4\"\n            onChange={ e => setMood(e.currentTarget.value) }\n            checked={ mood === \"4\" }\n          />\n          <label\n            htmlFor=\"strongly-positive\"\n            className=\"mood-label\"\n          >\n            üòÅ\n          </label>\n        </div>\n        { !validateForm &&\n          <p className=\"error-message\">\n            **Please select your mood today!**\n          </p>\n        }\n        <input\n          type=\"text\"\n          placeholder=\"Today, I am feeling...\"\n          className=\"mood-description\"\n          value={ description }\n          onChange={ e => setDescription(e.currentTarget.value) }\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </section>\n  )\n}\n\nexport default MoodForm;\n","import { useState, useEffect } from 'react';\nimport { useQuery } from \"@apollo/client\";\nimport './App.css';\nimport { QUERY_USER } from '../../utils/graph_queries';\nimport { User } from '../../utils/Models';\nimport MoodForm from '../MoodForm/MoodForm';\n\nfunction App() {\n  const { loading, error, data } = useQuery(QUERY_USER)\n  const [ user, setUser ] = useState<User | null>(null)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUser(data.fetchUser)\n    }\n  }, [data, loading])\n\n  if (loading) {\n   return  <h2>Loading</h2>\n  }\n\n  if (error) {\n    return <h2>{ error }</h2>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>GlowUp</h1>\n        { user && <h2>Welcome { user.username }</h2>}\n        <nav className=\"nav\">\n          <h2>Dashboard</h2>\n          <h2>Journal</h2>\n        </nav>\n      </header>\n      <MoodForm />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3001/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}