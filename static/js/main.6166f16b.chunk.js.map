{"version":3,"sources":["utils/graph_mutations.js","components/MoodForm/MoodForm.tsx","utils/context.tsx","utils/graph_queries.js","components/HabitCard/HabitCard.tsx","assets/icons/habit7-uncheck.png","components/HabitForm/HabitForm.tsx","components/Dashboard/Dashboard.tsx","components/App/App.tsx","index.tsx"],"names":["SUBMIT_MOOD","gql","SUBMIT_HABIT","MoodForm","useState","mood","setMood","description","setDescription","validateForm","setValidateForm","useMutation","createMood","isSubmitted","setIsSubmitted","className","onSubmit","e","preventDefault","variables","parseInt","type","name","id","value","onChange","currentTarget","checked","htmlFor","placeholder","AppContext","createContext","userHabits","setUserHabits","checkedHabitIds","setCheckedHabitIds","ContextProvider","children","Provider","QUERY_HABITS","QUERY_DAILY_ENTRIES","HabitCard","props","useContext","includes","setChecked","backgroundColor","color","style","setStyle","onClick","filtered","filter","ele","HabitForm","useQuery","error","data","createHabitEntry","entryParams","map","length","idArr","alert","fetchHabits","habit","Dashboard","todaysMood","setTodaysMood","todaysHabits","setTodaysHabits","loading","useEffect","fetchUser","dailyMood","dailyHabits","console","log","today","Date","dd","String","getDate","padStart","date","getMonth","getFullYear","displayMood","to","App","path","index","element","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.6166f16b.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const SUBMIT_MOOD = gql`\n  mutation createMood($mood: Int!, $description: String) {\n    createMood(input: { params: { mood: $mood, description: $description } }) {\n      user {\n        id\n      }\n    }\n  }\n`\n//mfer this one's input type got me ;/ aaahhhhhhh!\nexport const SUBMIT_HABIT = gql`\n  mutation addHabitEntries($idArr: [HabitEntryInput!]!) {\n    createHabitEntry(input: { params: $idArr }) {\n      user {\n        habitEntries {\n          habitId\n          status\n          date\n        }\n      }\n    }\n  }\n`\n","import './MoodForm.css';\nimport { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { SUBMIT_MOOD } from '../../utils/graph_mutations';\n\nconst MoodForm = () => {\n  const [ mood, setMood ] = useState('')\n  const [ description, setDescription ] = useState('')\n  const [ validateForm, setValidateForm ] = useState(true)\n  const [ createMood ] = useMutation(SUBMIT_MOOD)\n  const [isSubmitted, setIsSubmitted ] = useState(false)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!mood) {\n      setValidateForm(false)\n    } else {\n      createMood({ variables: { mood: parseInt(mood), description: description }})\n\n      setValidateForm(true)\n      setMood('');\n      setDescription('');\n      setIsSubmitted(true)\n    }\n  }\n\n  return (\n    <section className=\"mood-form-container\">\n      { !isSubmitted ?\n        <form className=\"mood-form\" onSubmit={ handleSubmit }>\n          <h2>\n            How are you feeling today?\n          </h2>\n          <div className=\"moods-container\">\n            <input\n              type=\"radio\"\n              aria-label=\"strongly positive\"\n              name=\"mood\"\n              id=\"strongly-positive\"\n              value=\"4\"\n              onChange={ e => setMood(e.currentTarget.value) }\n              checked={ mood === \"4\" }\n            />\n            <label\n              htmlFor=\"strongly-positive\"\n              className=\"mood-label\"\n            >\n              😁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"positive\"\n              name=\"mood\"\n              id=\"positive\"\n              value=\"3\"\n              onChange={ e => setMood(e.currentTarget.value) }\n              checked={ mood === \"3\" }\n            />\n            <label\n              htmlFor=\"positive\"\n              className=\"mood-label\"\n            >\n              🙂\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"neutral\"\n              name=\"mood\"\n              id=\"neutral\"\n              value=\"2\"\n              onChange={ e => setMood(e.currentTarget.value) }\n              checked={ mood === \"2\" }\n            />\n            <label\n              htmlFor=\"neutral\"\n              className=\"mood-label\"\n            >\n              😐\n            </label>\n\n            <input\n              type=\"radio\"\n              aria-label=\"negative\"\n              name=\"mood\"\n              id=\"negative\"\n              value=\"1\"\n              onChange={ e => setMood(e.currentTarget.value) }\n              checked={ mood === \"1\" }\n            />\n            <label\n              htmlFor=\"negative\"\n              className=\"mood-label\"\n            >\n              🙁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"strongly negative\"\n              name=\"mood\"\n              id=\"strongly-negative\"\n              value=\"0\"\n              onChange={ e => setMood(e.currentTarget.value) }\n              checked={ mood === \"0\" }\n            />\n            <label\n              htmlFor=\"strongly-negative\"\n              className=\"mood-label\"\n            >\n              😭\n            </label>\n          </div>\n          { !validateForm &&\n            <p className=\"error-message\">\n              **Please select your mood today!**\n            </p>\n          }\n          <input\n            type=\"text\"\n            placeholder=\"Today, I am feeling...\"\n            className=\"mood-description\"\n            value={ description }\n            onChange={ e => setDescription(e.currentTarget.value) }\n          />\n          <button className=\"mood-submit-button\" type=\"submit\">Submit</button>\n        </form>\n        :\n          <article className=\"mood-form\">\n            <h2>Thank you for submitting your mood today!</h2>\n          </article>\n        }\n    </section>\n  )\n}\n\nexport default MoodForm;\n","import React, { createContext, useState } from \"react\"\nimport { Habit } from \"./Models\"\n\ninterface ContextState {\n  userHabits: Habit[]\n  setUserHabits: (habits: Habit[]) => void\n  checkedHabitIds: number[]\n  setCheckedHabitIds: (habitIds: number[]) => void\n  // moodRecorded: boolean\n  // setMoodRecorded: (moodRecorded: boolean) => void\n  // habitRecorded: boolean\n  // setHabitRecorded: (habitRecorded: boolean) => void\n  // todaysMood: Mood\n  // setTodaysMood: (mood: Mood) => void\n  // todaysHabits: HabitEntry[]\n  // setTodaysHabits: (habits: HabitEntry[]) => void\n}\n\nconst AppContext = createContext<ContextState>({\n  userHabits: [],\n  setUserHabits: () => {},\n  checkedHabitIds: [],\n  setCheckedHabitIds: () => {},\n  // moodRecorded: false,\n  // setMoodRecorded: () => {},\n  // habitRecorded: false,\n  // setHabitRecorded: () => {},\n  // todaysMood: [],\n  // setTodaysMood: () => {},\n  // todaysHabits: [],\n  // setTodaysHabits: () => {},\n})\n\nconst ContextProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [userHabits, setUserHabits] = useState<Habit[]>([])\n  const [checkedHabitIds, setCheckedHabitIds] = useState<number[]>([])\n\n  // const [moodRecorded, setMoodRecorded] = useState<boolean>(false)\n  // const [habitRecorded, setHabitRecorded] = useState<boolean>(false)\n\n  // const [todaysMood, setTodaysMood] = useState<Mood | null>(null)\n\n  // const [todaysHabits, setTodaysHabits] = useState<HabitEntry[] | null>(null)\n\n  return (\n    <AppContext.Provider\n      value={{\n        userHabits,\n        setUserHabits,\n        checkedHabitIds,\n        setCheckedHabitIds,\n        // moodRecorded,\n        // setMoodRecorded,\n        // habitRecorded,\n        // setHabitRecorded,\n        // todaysMood,\n        // setTodaysMood,\n        // todaysHabits,\n        // setTodaysHabits,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport { AppContext, ContextProvider }\n","import { gql } from \"@apollo/client\"\n\nexport const QUERY_USER = gql`\n  query fetchUser {\n    fetchUser {\n      username\n\n      moods {\n        id\n        description\n        mood\n        createdAt\n      }\n\n      habitEntries {\n        id\n        date\n        habitId\n        status\n      }\n\n      journalEntries {\n        id\n        content\n        date\n      }\n    }\n  }\n`\nexport const QUERY_HABITS = gql`\n  query fetchHabits {\n    fetchHabits {\n      id\n      name\n    }\n  }\n`\nexport const QUERY_DAILY_ENTRIES = gql`\n  query fetchUser {\n    fetchUser {\n      dailyMood {\n        id\n        mood\n        description\n      }\n\n      dailyHabits {\n        id\n        name\n      }\n    }\n  }\n`\n// const QUERY_WEEKLY_ENTRIES = gql`\n//   query fetchUser {\n//     fetchUser {\n//       weeklyHabits {\n//         habitId\n//         status\n//         date\n//         id\n//       }\n//       weeklyMoods {\n//         createdAt\n//         mood\n//       }\n//     }\n//   }\n// `\n","import \"./HabitCard.css\"\nimport { useState, useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\n\ninterface HabitCardProps {\n  name: string\n  id: string\n}\n\nexport default function HabitCard(props: HabitCardProps) {\n  const { checkedHabitIds, setCheckedHabitIds } = useContext(AppContext)\n  const [checked, setChecked] = useState(checkedHabitIds.includes(parseInt(props.id)))\n  const [style, setStyle] = useState({\n    backgroundColor: \"#e4dfdd\",\n    color: \"black\",\n  })\n\n  const toggleCheck = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    switch (checked) {\n      case false:\n        setChecked(true)\n        setCheckedHabitIds([...checkedHabitIds, parseInt(e.currentTarget.id)])\n        setStyle({ backgroundColor: \"#4a5582\", color: \"#fff\" })\n        break\n\n      case true:\n        setChecked(false)\n        let filtered = checkedHabitIds.filter(ele => ele !== parseInt(e.currentTarget.id))\n        setCheckedHabitIds(filtered)\n        setStyle({ backgroundColor: \"#e4dfdd\", color: \"black\" })\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <button className=\"habit-card-button\" onClick={toggleCheck} id={props.id} style={style}>\n      {props.name}\n    </button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/habit7-uncheck.d30420f0.png\";","import \"./HabitForm.css\"\nimport { AppContext } from \"../../utils/context\"\nimport { QUERY_HABITS } from \"../../utils/graph_queries\"\nimport { SUBMIT_HABIT } from \"../../utils/graph_mutations\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { useContext } from \"react\"\nimport HabitCard from \"../HabitCard/HabitCard\"\nimport \"../../assets/icons/habit7-uncheck.png\"\nimport { Habit } from \"../../utils/Models\"\n\nconst HabitForm = () => {\n  const { error, data } = useQuery(QUERY_HABITS)\n  const { checkedHabitIds } = useContext(AppContext)\n  const [createHabitEntry] = useMutation(SUBMIT_HABIT)\n\n  const createHabitEntries = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const entryParams = checkedHabitIds.map(ele => ({ id: ele }))\n    if (!entryParams.length) {\n      alert(\"You have not selected any habit\")\n    } else {\n      createHabitEntry({ variables: { idArr: entryParams } })\n      alert(\"Great job\")\n    }\n  }\n\n  return (\n    <section className=\"habit-form-container\">\n      <h2 className=\"habit-form-question\">What have you accomplished?</h2>\n      {data ? (\n        <form className=\"habit-form\" onSubmit={createHabitEntries}>\n          {data.fetchHabits.map((habit: Habit) => (\n            <HabitCard name={habit.name} id={habit.id} key={habit.id} />\n          ))}\n          <button className=\"habit-submit-button\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      ) : (\n        <h2>{error}</h2>\n      )}\n    </section>\n  )\n}\n\nexport default HabitForm\n","import \"./Dashboard.css\"\nimport { Link } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\n// import { AppContext } from \"../../utils/context\"\nimport { useQuery } from \"@apollo/client\"\n\nimport { QUERY_DAILY_ENTRIES } from \"../../utils/graph_queries\"\nimport { Habit, Mood } from \"../../utils/Models\"\n\nconst Dashboard = () => {\n  // const { moodRecorded, habitRecorded } = useContext(AppContext)\n  const [todaysMood, setTodaysMood] = useState<Mood | null>(null)\n  const [todaysHabits, setTodaysHabits] = useState<Habit[]>([])\n  const { loading, error, data } = useQuery(QUERY_DAILY_ENTRIES)\n\n\n\n  useEffect(() => {\n    if (!loading && data) {\n      setTodaysMood(data.fetchUser.dailyMood)\n      setTodaysHabits(data.fetchUser.dailyHabits)\n      console.log('is this running')\n    }\n  }, [loading, data])\n\n  const displayMood = () => {\n    if (todaysMood) {\n      switch (todaysMood.mood) {\n        case 0:\n          return \"😭\"\n        case 1:\n          return \"🙁\"\n        case 2:\n          return \"😐\"\n        case 3:\n          return \"🙂\"\n        case 4:\n          return \"😁\"\n\n        default:\n          return \"❓\"\n      }\n    }\n  }\n\n  const displayHabit = () => {\n    const completedHabits = todaysHabits!.map((habit: Habit) => <p key={habit.id}>✅ {habit.name}</p>)\n\n    return completedHabits\n  }\n\n  const today = new Date()\n  var dd = String(today.getDate()).padStart(2, '0');\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  var yyyy = today.getFullYear();\n\n  const date = mm + '/' + dd + '/' + yyyy;\n\n  return (\n  <main>\n    { error && <h2>Oops, something went wrong!</h2> }\n    <section className=\"dashboard-container\">\n      <h2 className=\"page-title\">My Dashboard</h2>\n        <article className=\"today-container\">\n          { todaysMood ? (\n          <div>\n            <h3>Today {date}</h3>\n            <p>I am feeling: {displayMood()}</p>\n            {// { todaysMood && todaysMood.description && (<p>{todaysMood.description}</p>)}\n          }\n          </div>\n        )\n        :\n        (\n          <Link to=\"/glow-up-fe/\">➕ Enter your mood today!</Link>\n        )}\n        { todaysHabits.length ? (\n          <div className=\"completed-habits\">\n            <h4>Habits I completed:</h4>\n            {displayHabit()}\n            <Link to=\"/glow-up-fe/habit-tracker\">➕ Add more habits</Link>\n          </div>\n        )\n        :\n        (\n          <Link to=\"/glow-up-fe/habit-tracker\">➕ Enter your habits!</Link>\n        )}\n      </article>\n    </section>\n    <section className=\"week-container\">\n      <h3>This week...</h3>\n    </section>\n  </main>\n  )\n}\n\nexport default Dashboard\n\n/* {moodRecorded ? (\n  <div className=\"daily-mood\">🥳 I feel super today</div>\n) : (\n  <Link to=\"/glow-up-fe/\">Enter your mood today!</Link>\n)}\n{habitRecorded ? (\n  <div className=\"daily-habit\">Today I've done blah blah</div>\n) : (\n  <Link to=\"/glow-up-fe/habit-tracker\">Enter your habits today!</Link>\n)} */\n","import \"./App.css\"\nimport MoodForm from \"../MoodForm/MoodForm\"\nimport HabitForm from \"../HabitForm/HabitForm\"\nimport Dashboard from \"../Dashboard/Dashboard\"\nimport { Routes, Route, NavLink } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>GlowUp</h1>\n        <nav className=\"nav\">\n          <NavLink to=\"glow-up-fe/\">\n            Mood Tracker\n          </NavLink>\n          <NavLink to=\"glow-up-fe/habit-tracker\">\n            Habit Tracker\n          </NavLink>\n          <NavLink to=\"glow-up-fe/journal\">\n            Journal\n          </NavLink>\n          <NavLink to=\"glow-up-fe/dashboard\">\n            Dashboard\n          </NavLink>\n\n        </nav>\n      </header>\n      <Routes>\n        <Route path=\"glow-up-fe\">\n          <Route index element={<MoodForm />}/>\n          <Route path=\"habit-tracker\" element={<HabitForm />}/>\n          <Route path=\"dashboard\" element={<Dashboard />}/>\n        </Route>\n      </Routes>\n\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App/App\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\nimport { ContextProvider } from \"./utils/context\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nconst client = new ApolloClient({\n  uri: \"https://glowup-be.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ApolloProvider client={client}>\n        <ContextProvider>\n          <App />\n        </ContextProvider>\n      </ApolloProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}