{"version":3,"sources":["utils/graph_mutations.js","utils/context.tsx","components/MoodToday/MoodToday.tsx","components/MoodForm/MoodForm.tsx","utils/graph_queries.js","components/HabitCard/HabitCard.tsx","assets/icons/habit7-uncheck.png","components/HabitForm/HabitForm.tsx","components/MonthlyGraphs/MonthlyGraphs.tsx","components/Dashboard/Dashboard.tsx","components/Journal/Journal.tsx","components/App/App.tsx","index.tsx"],"names":["SUBMIT_MOOD","gql","SUBMIT_HABIT","AppContext","createContext","userHabits","setUserHabits","checkedHabitIds","setCheckedHabitIds","todaysMood","setTodaysMood","todaysHabits","setTodaysHabits","displayMood","ContextProvider","children","useState","Provider","value","mood","MoodToday","today","Date","dd","String","getDate","padStart","date","getMonth","getFullYear","useContext","className","description","MoodForm","setMood","setDescription","validateForm","setValidateForm","useMutation","createMood","onSubmit","e","preventDefault","variables","parseInt","type","name","id","onChange","currentTarget","checked","htmlFor","placeholder","QUERY_HABITS","QUERY_DAILY_ENTRIES","QUERY_MONTHLY_ENTRIES","QUERY_JOURNAL_ENTRIES","HabitCard","props","checkedToday","setChecked","false","backgroundColor","color","true","style","useEffect","onClick","filtered","filter","ele","HabitForm","useQuery","loading","error","data","createHabitEntry","map","message","length","entryParams","idArr","alert","fetchHabits","habit","includes","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","yLabels","options","responsive","plugins","legend","position","title","display","text","scales","yAxis","ticks","callback","MonthlyGraphs","monthString","toLocaleString","month","labels","setLabels","monthlyMoods","setMonthlyMoods","dayLabels","fetchUser","slice","sort","a","b","createdAt","Intl","DateTimeFormat","format","reverse","dataset","datasets","label","borderColor","borderWidth","fill","Dashboard","refetch","dailyMood","dailyHabits","to","Journal","journalEntries","setJournalEntries","entryCards","entry","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","content","App","path","index","element","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"gaAEaA,EAAcC,YAAH,wNAUXC,EAAeD,YAAH,qQ,OCInBE,EAAaC,wBAA4B,CAC7CC,WAAY,GACZC,cAAe,aACfC,gBAAiB,GACjBC,mBAAoB,aACpBC,WAAY,KACZC,cAAe,aACfC,aAAc,GACdC,gBAAiB,aACjBC,YAAa,iBAAM,MAGfC,EAAkB,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SACzB,EAAoCC,mBAAkB,IAAtD,mBAAOX,EAAP,KAAmBC,EAAnB,KACA,EAA8CU,mBAAmB,IAAjE,mBAAOT,EAAP,KAAwBC,EAAxB,KAEA,EAAoCQ,mBAAsB,MAA1D,mBAAOP,EAAP,KAAmBC,EAAnB,KAEA,EAAwCM,mBAAkB,IAA1D,mBAAOL,EAAP,KAAqBC,EAArB,KAoBA,OACE,cAACT,EAAWc,SAAZ,CACEC,MAAO,CACLb,aACAC,gBACAC,kBACAC,qBACAC,aACAC,gBACAC,eACAC,kBACAC,YA7Bc,SAACM,GACnB,OAAQA,GACN,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eAET,QACE,MAAO,YAKX,SAaGJ,K,OChEQ,SAASK,IACtB,IAAMC,EAAQ,IAAIC,KACdC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KAIvCC,EAHGH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAGhC,IAAMH,EAAK,IAFlBF,EAAMQ,cAGjB,EAAoCC,qBAAW3B,GAAvCM,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,YACpB,OACE,sBAAKkB,UAAU,uBAAf,UACE,yCAAYJ,KACZ,+CAAkBd,EAAYJ,EAAYU,SACzCV,EAAYuB,aAAe,4BAAIvB,EAAYuB,iBCTlD,I,UA8GeC,EA9GE,WACf,MAAwBjB,mBAAS,IAAjC,mBAAOG,EAAP,KAAae,EAAb,KACA,EAAsClB,mBAAS,IAA/C,mBAAOgB,EAAP,KAAoBG,EAApB,KACA,EAAwCnB,oBAAS,GAAjD,mBAAOoB,EAAP,KAAqBC,EAArB,KACA,EAAqBC,YAAYtC,GAA1BuC,EAAP,oBAEQ9B,EAAeqB,qBAAW3B,GAA1BM,WAiBR,OACE,yBAASsB,UAAU,sBAAnB,SACItB,EACA,cAAC,EAAD,IAEA,uBAAMsB,UAAU,YAAYS,SApBb,SAACC,GACpBA,EAAEC,iBAEGvB,GAGHoB,EAAW,CAAEI,UAAW,CAAExB,KAAMyB,SAASzB,GAAOa,YAAaA,KAE7DK,GAAgB,GAChBH,EAAQ,IACRC,EAAe,KANfE,GAAgB,IAgBd,UACE,4DACA,sBAAKN,UAAU,kBAAf,UACE,uBACEc,KAAK,QACL,aAAW,oBACXC,KAAK,OACLC,GAAG,oBACH7B,MAAM,IACN8B,SAAU,SAAAP,GAAC,OAAIP,EAAQO,EAAEQ,cAAc/B,QACvCgC,QAAkB,MAAT/B,IAEX,uBAAOgC,QAAQ,oBAAoBpB,UAAU,aAA7C,0BAGA,uBACEc,KAAK,QACL,aAAW,WACXC,KAAK,OACLC,GAAG,WACH7B,MAAM,IACN8B,SAAU,SAAAP,GAAC,OAAIP,EAAQO,EAAEQ,cAAc/B,QACvCgC,QAAkB,MAAT/B,IAEX,uBAAOgC,QAAQ,WAAWpB,UAAU,aAApC,0BAGA,uBACEc,KAAK,QACL,aAAW,UACXC,KAAK,OACLC,GAAG,UACH7B,MAAM,IACN8B,SAAU,SAAAP,GAAC,OAAIP,EAAQO,EAAEQ,cAAc/B,QACvCgC,QAAkB,MAAT/B,IAEX,uBAAOgC,QAAQ,UAAUpB,UAAU,aAAnC,0BAIA,uBACEc,KAAK,QACL,aAAW,WACXC,KAAK,OACLC,GAAG,WACH7B,MAAM,IACN8B,SAAU,SAAAP,GAAC,OAAIP,EAAQO,EAAEQ,cAAc/B,QACvCgC,QAAkB,MAAT/B,IAEX,uBAAOgC,QAAQ,WAAWpB,UAAU,aAApC,0BAGA,uBACEc,KAAK,QACL,aAAW,oBACXC,KAAK,OACLC,GAAG,oBACH7B,MAAM,IACN8B,SAAU,SAAAP,GAAC,OAAIP,EAAQO,EAAEQ,cAAc/B,QACvCgC,QAAkB,MAAT/B,IAEX,uBAAOgC,QAAQ,oBAAoBpB,UAAU,aAA7C,8BAIAK,GAAgB,mBAAGL,UAAU,gBAAb,gDAClB,uBACEc,KAAK,OACLO,YAAY,wBACZrB,UAAU,mBACVb,MAAOc,EACPgB,SAAU,SAAAP,GAAC,OAAIN,EAAeM,EAAEQ,cAAc/B,UAEhD,wBAAQa,UAAU,qBAAqBc,KAAK,SAA5C,2CC9EGQ,G,OA5BapD,YAAH,8WA4BKA,YAAH,yGAQZqD,EAAsBrD,YAAH,6NAmCnBsD,EAAwBtD,YAAH,oKAarBuD,EAAwBvD,YAAH,oK,wBC5EnB,SAASwD,EAAUC,GAChC,MAAgD5B,qBAAW3B,GAAnDI,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,mBACzB,EAA8BQ,mBAAS0C,EAAMC,cAA7C,mBAAOT,EAAP,KAAgBU,EAAhB,KACA,EAAgB5C,mBAAS,CACvB6C,MAAO,CACLC,gBAAiB,UACjBC,MAAO,SAETC,KAAM,CACJF,gBAAiB,UACjBC,MAAO,WAPJE,EAAP,oBAWAC,qBAAU,WACRN,EAAWF,EAAMC,gBAChB,CAACD,EAAMC,eAoBV,OACE,wBACE5B,UAAU,oBACVoC,QArBgB,SAAC1B,GAEnB,OADAA,EAAEC,iBACMQ,GACN,KAAK,EACHU,GAAW,GACXpD,EAAmB,GAAD,mBAAKD,GAAL,CAAsBqC,SAASH,EAAEQ,cAAcF,OACjE,MAEF,KAAK,EACHa,GAAW,GACX,IAAIQ,EAAW7D,EAAgB8D,QAAO,SAAAC,GAAG,OAAIA,IAAQ1B,SAASH,EAAEQ,cAAcF,OAC9EvC,EAAmB4D,KAWrBrB,GAAIW,EAAMX,GACVkB,MAAOf,EAAUe,EAAMD,KAAOC,EAAMJ,MAJtC,SAMGH,EAAMZ,OCrDE,QCkEAyB,EAxDG,WAChB,MAAiCC,YAASnB,GAAlCoB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA8D7C,qBAAW3B,GAAjEI,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,mBAAoBG,EAA7C,EAA6CA,aAC7C,EAA2B2B,YAAYpC,GAAhC0E,EAAP,oBAEAV,qBAAU,YACHO,GAAWE,GACdnE,EAAmBG,EAAakE,KAAI,SAACP,GAAD,OAAgB1B,SAAS0B,EAAIvB,UAGlE,CAAC0B,EAASE,IAyBb,OACE,qCACGF,GAAW,4CACXC,GAAS,8CAAeA,EAAMI,WAC/B,0BAAS/C,UAAU,uBAAnB,UACGpB,EAAaoE,OACZ,iDAEA,oBAAIhD,UAAU,sBAAd,gDAEF,uBAAMA,UAAU,aAAaS,SAjCR,SAACC,GAC1BA,EAAEC,iBACF,IAAMsC,EAAczE,EAAgBsE,KAAI,SAAAP,GAAG,MAAK,CAAEvB,GAAIuB,MACjDU,EAAYD,QAIfH,EAAiB,CAAEjC,UAAW,CAAEsC,MAAOD,KACvCE,MAAM,eAJNA,MAAM,4CACNN,EAAiB,CAAEjC,UAAW,CAAEsC,MAAOD,OA4BrC,UACGL,GArBAA,EAAKQ,YAAYN,KAAI,SAACO,GAAD,OAC1B,cAAC,EAAD,CACEtC,KAAMsC,EAAMtC,KACZC,GAAIqC,EAAMrC,GAEVY,aAAcpD,EAAgB8E,SAASzC,SAASwC,EAAMrC,MADjDqC,EAAMrC,OAkBT,wBAAQhB,UAAU,sBAAsBc,KAAK,SAA7C,8B,2CCxCVyC,IAAQC,SACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGF,IAAMC,EAAU,CACd,EAAG,eACF,EAAG,eACH,EAAG,eACH,EAAG,eACH,EAAG,gBAGAC,EAAU,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,OAEZC,MAAO,CACLC,SAAS,EACTC,KAAM,kBAGVC,OAAQ,CACLC,MAAO,CACLC,MAAO,CACHC,SAAU,SAASzF,GACf,OAAO6E,EAAQ7E,QAmEf0F,EA5DO,WACpB,IACMC,GADQ,IAAIvF,MACQwF,eAAe,UAAW,CAAEC,MAAO,SAE7D,EAA8B/F,mBAAmB,IAAjD,mBAAQgG,EAAR,KAAgBC,EAAhB,KACA,EAA0CjG,mBAAiB,IAA3D,mBAAQkG,EAAR,KAAsBC,EAAtB,KAEA,EAAiC3C,YAASjB,GAAlCkB,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAAMD,EAAvB,EAAuBA,MAEvBR,qBAAU,WACR,IAAKO,GAAWE,EAAM,CACpB,IAAMyC,EAAYzC,EAAK0C,UAAUH,aAAaI,QAC7CC,MAAK,SAACC,EAASC,GACd,OAAO7E,SAAS4E,EAAEE,UAAWJ,MAAM,EAAE,KAAO1E,SAAS6E,EAAEC,UAAWJ,MAAM,EAAE,QAE3EzC,KAAI,SAAC1D,GACF,IAAMQ,EAAO,IAAIL,KAAKH,EAAKuG,WAC3B,OAAO,IAAIC,KAAKC,eAAe,SAASC,OAAOlG,MAG7CuF,EAAevC,EAAK0C,UAAUH,aAAaI,QAAQQ,UACtDjD,KAAI,SAAC1D,GAAD,OAAgBA,EAAKA,QAE5B8F,EAAUG,GACVD,EAAgBD,MAEjB,CAAEvC,EAAMF,IAEV,IAAMsD,EAAU,CACbf,SACAgB,SAAU,CACR,CACEnF,KAAM,OACNoF,MAAO,QACPC,YAAa,oBACbC,YAAa,EACbC,MAAM,EACNzD,KAAMuC,KAOd,OACE,0BAASnF,UAAU,kBAAnB,UACE,oBAAIA,UAAU,cAAd,SAA6B8E,IACzBK,EAAanC,OACf,cAAC,IAAD,CAAOlC,KAAK,OAAO8B,KAAMoD,EAAU/B,QAASA,IAI5C,mFAGAtB,GAAS,kEC3CF2D,EA3DG,WAChB,MAAqEvG,qBAAW3B,GAAxEM,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,aAAcC,EAAjD,EAAiDA,gBAEjD,EAA0C4D,YAASlB,GAA3CmB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAM2D,EAA9B,EAA8BA,QAE9BpE,qBAAU,WACRoE,KACK7D,GAAWE,IACdjE,EAAciE,EAAK0C,UAAUkB,WAC7B3H,EAAgB+D,EAAK0C,UAAUmB,gBAGhC,CAAC/D,EAASE,IAcb,OACE,iCACGF,GAAW,4CACXC,GAAS,8CAAeA,EAAMI,WAC/B,0BAAS/C,UAAU,sBAAnB,UACE,oBAAIA,UAAU,aAAd,0BACA,gCACE,mBAAGA,UAAU,aAAb,0FACA,mBAAGA,UAAU,oBAAb,sCAGJ,0BAASA,UAAU,kBAAnB,UACGtB,EAAa,cAAC,EAAD,IAAgB,cAAC,IAAD,CAAMgI,GAAG,oBAAT,2CAC7B9H,EAAaoE,OACZ,sBAAKhD,UAAU,6BAAf,UACE,qDACA,qBAAKA,UAAU,mBAAf,SA3BgBpB,EAAckE,KAAI,SAACO,GAAD,OACxC,oBAAGrD,UAAU,kBAAb,UACE,sBAAMA,UAAU,4BAAhB,kBAGCqD,EAAMtC,OAJ2BsC,EAAMrC,SA6BpC,cAAC,IAAD,CAAM0F,GAAG,oBAAT,mCAGF,cAAC,IAAD,CAAMA,GAAG,oBAAT,0CAGJ,yBAAS1G,UAAU,iBAAnB,SACE,gDAEF,cAAC,EAAD,Q,+DCXS2G,EA1CC,WACd,MAAiClE,YAAShB,GAAlCiB,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAAMD,EAAvB,EAAuBA,MACvB,EAA8C1D,mBAAyB,IAAvE,mBAAQ2H,EAAR,KAAwBC,EAAxB,KAEA1E,qBAAU,YACHO,GAAWE,GACdiE,EAAkBjE,EAAK0C,UAAUsB,kBAElC,CAAClE,EAASE,IAEb,IAAMkE,EAAaF,EAAe9D,KAAI,SAACiE,GACrC,IAAMnH,EAAO,IAAIL,KAAKwH,EAAMnH,MAAMmF,eAAe,SACjD,OACE,eAACiC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,IAAD,IACZ,+BAAuBtH,EAAvB,YACAoB,GAAE,eAAUpB,EAAV,WAHJ,SAKE,eAACuH,EAAA,EAAD,4BAA2BvH,OAE7B,cAACwH,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,UACCJ,EAAMM,kBAOf,OACE,oCACI3E,GAAW,4CACXC,GAAS,6DACX,qBAAK3C,UAAU,0BAAf,SACE,oBAAIA,UAAU,gBAAd,0BAEA8G,M,QCVOQ,MA/Bf,WACE,OACE,sBAAKtH,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,wCACA,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,CAAS0G,GAAG,uBAAZ,uBACA,cAAC,IAAD,CAASA,GAAG,mBAAZ,mBACA,cAAC,IAAD,CAASA,GAAG,qBAAZ,2BAGJ,cAAC,IAAD,UACE,eAAC,IAAD,CAAOa,KAAK,aAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CACEF,KAAK,QACLE,QACE,0BAASzH,UAAU,qBAAnB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAIN,cAAC,IAAD,CAAOuH,KAAK,YAAYE,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOF,KAAK,UAAUE,QAAS,cAAC,EAAD,e,2BCvBnCC,EAAS,IAAIC,IAAa,CAE9BC,IAAK,gCAELC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,YAKRS,SAASC,eAAe,W","file":"static/js/main.6eb5de28.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const SUBMIT_MOOD = gql`\n  mutation createMood($mood: Int!, $description: String) {\n    createMood(input: { params: { mood: $mood, description: $description } }) {\n      user {\n        id\n      }\n    }\n  }\n`\n//mfer this one's input type got me ;/ aaahhhhhhh!\nexport const SUBMIT_HABIT = gql`\n  mutation addHabitEntries($idArr: [HabitEntryInput!]!) {\n    createHabitEntry(input: { params: $idArr }) {\n      user {\n        habitEntries {\n          habitId\n          status\n          date\n        }\n      }\n    }\n  }\n`\n","import React, { createContext, useState } from \"react\"\n\nimport { Habit, Mood } from \"./Models\"\n\ninterface ContextState {\n  userHabits: Habit[]\n  setUserHabits: (habits: Habit[]) => void\n  checkedHabitIds: number[]\n  setCheckedHabitIds: (habitIds: number[]) => void\n  todaysMood: Mood | null\n  setTodaysMood: (mood: Mood) => void\n  todaysHabits: Habit[]\n  setTodaysHabits: (habits: Habit[]) => void\n  displayMood: (mood: number) => string\n}\n\nconst AppContext = createContext<ContextState>({\n  userHabits: [],\n  setUserHabits: () => {},\n  checkedHabitIds: [],\n  setCheckedHabitIds: () => {},\n  todaysMood: null,\n  setTodaysMood: () => {},\n  todaysHabits: [],\n  setTodaysHabits: () => {},\n  displayMood: () => \"\",\n})\n\nconst ContextProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [userHabits, setUserHabits] = useState<Habit[]>([])\n  const [checkedHabitIds, setCheckedHabitIds] = useState<number[]>([])\n\n  const [todaysMood, setTodaysMood] = useState<Mood | null>(null)\n\n  const [todaysHabits, setTodaysHabits] = useState<Habit[]>([])\n\n  const displayMood = (mood: number) => {\n    switch (mood) {\n      case 0:\n        return \"😭\"\n      case 1:\n        return \"🙁\"\n      case 2:\n        return \"😐\"\n      case 3:\n        return \"🙂\"\n      case 4:\n        return \"😁\"\n\n      default:\n        return \"❓\"\n    }\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        userHabits,\n        setUserHabits,\n        checkedHabitIds,\n        setCheckedHabitIds,\n        todaysMood,\n        setTodaysMood,\n        todaysHabits,\n        setTodaysHabits,\n        displayMood,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport { AppContext, ContextProvider }\n","import { useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\nimport './MoodToday.css'\n\nexport default function MoodToday() {\n  const today = new Date()\n  var dd = String(today.getDate()).padStart(2, \"0\")\n  var mm = String(today.getMonth() + 1).padStart(2, \"0\") //January is 0!\n  var yyyy = today.getFullYear()\n\n  const date = mm + \"/\" + dd + \"/\" + yyyy\n  const { todaysMood, displayMood } = useContext(AppContext)\n  return (\n    <div className=\"today-mood-container\">\n      <h3>Today: {date}</h3>\n      <p>I am feeling: {displayMood(todaysMood!.mood)}</p>\n      {todaysMood!.description && <p>{todaysMood!.description}</p>}\n      {/* <button>Second Thought?</button>  to add when changing mood fnc is available*/}\n    </div>\n  )\n}\n","import \"./MoodForm.css\"\nimport { useState, useContext } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { SUBMIT_MOOD } from \"../../utils/graph_mutations\"\nimport { AppContext } from \"../../utils/context\"\nimport MoodToday from \"../MoodToday/MoodToday\"\n\nconst MoodForm = () => {\n  const [mood, setMood] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [validateForm, setValidateForm] = useState(true)\n  const [createMood] = useMutation(SUBMIT_MOOD)\n  // const [isSubmitted, setIsSubmitted] = useState(false)\n  const { todaysMood } = useContext(AppContext)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    if (!mood) {\n      setValidateForm(false)\n    } else {\n      createMood({ variables: { mood: parseInt(mood), description: description } })\n\n      setValidateForm(true)\n      setMood(\"\")\n      setDescription(\"\")\n      // setIsSubmitted(true)\n    }\n  }\n\n  return (\n    <section className=\"mood-form-container\">\n      { todaysMood ? (\n        <MoodToday />\n      ) : (\n        <form className=\"mood-form\" onSubmit={handleSubmit}>\n          <h2>How are you feeling today?</h2>\n          <div className=\"moods-container\">\n            <input\n              type=\"radio\"\n              aria-label=\"strongly positive\"\n              name=\"mood\"\n              id=\"strongly-positive\"\n              value=\"4\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"4\"}\n            />\n            <label htmlFor=\"strongly-positive\" className=\"mood-label\">\n              😁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"positive\"\n              name=\"mood\"\n              id=\"positive\"\n              value=\"3\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"3\"}\n            />\n            <label htmlFor=\"positive\" className=\"mood-label\">\n              🙂\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"neutral\"\n              name=\"mood\"\n              id=\"neutral\"\n              value=\"2\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"2\"}\n            />\n            <label htmlFor=\"neutral\" className=\"mood-label\">\n              😐\n            </label>\n\n            <input\n              type=\"radio\"\n              aria-label=\"negative\"\n              name=\"mood\"\n              id=\"negative\"\n              value=\"1\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"1\"}\n            />\n            <label htmlFor=\"negative\" className=\"mood-label\">\n              🙁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"strongly negative\"\n              name=\"mood\"\n              id=\"strongly-negative\"\n              value=\"0\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"0\"}\n            />\n            <label htmlFor=\"strongly-negative\" className=\"mood-label\">\n              😭\n            </label>\n          </div>\n          {!validateForm && <p className=\"error-message\">**Please select your mood today!**</p>}\n          <input\n            type=\"text\"\n            placeholder=\"Describe your mood...\"\n            className=\"mood-description\"\n            value={description}\n            onChange={e => setDescription(e.currentTarget.value)}\n          />\n          <button className=\"mood-submit-button\" type=\"submit\">\n            ✔ submit your mood\n          </button>\n        </form>\n      )}\n    </section>\n  )\n}\n\nexport default MoodForm\n","import { gql } from \"@apollo/client\"\n\nexport const QUERY_USER = gql`\n  query fetchUser {\n    fetchUser {\n      id\n      username\n\n      moods {\n        id\n        description\n        mood\n        createdAt\n      }\n\n      habitEntries {\n        id\n        date\n        habitId\n        status\n      }\n\n      journalEntries {\n        id\n        content\n        date\n      }\n    }\n  }\n`\nexport const QUERY_HABITS = gql`\n  query fetchHabits {\n    fetchHabits {\n      id\n      name\n    }\n  }\n`\nexport const QUERY_DAILY_ENTRIES = gql`\n  query fetchUser {\n    fetchUser {\n      id\n      dailyMood {\n        id\n        mood\n        description\n      }\n\n      dailyHabits {\n        id\n        name\n      }\n    }\n  }\n`\n// const QUERY_WEEKLY_ENTRIES = gql`\n//   query fetchUser {\n//     fetchUser {\n//       weeklyHabits {\n//         habitId\n//         status\n//         date\n//         id\n//       }\n//       weeklyMoods {\n//         createdAt\n//         mood\n//       }\n//     }\n//   }\n// `\n\n\nexport const QUERY_MONTHLY_ENTRIES = gql`\n  query fetchUser {\n    fetchUser {\n      id\n      monthlyMoods {\n        id\n        createdAt\n        mood\n      }\n    }\n  }\n`\n\nexport const QUERY_JOURNAL_ENTRIES = gql`\n  query fetchUser {\n    fetchUser {\n      id\n      journalEntries {\n        id\n        content\n        date\n      }\n    }\n  }\n`\n","import \"./HabitCard.css\"\nimport { useState, useContext, useEffect } from \"react\"\nimport { AppContext } from \"../../utils/context\"\n\ninterface HabitCardProps {\n  name: string\n  id: string\n  checkedToday: boolean\n}\n\nexport default function HabitCard(props: HabitCardProps) {\n  const { checkedHabitIds, setCheckedHabitIds } = useContext(AppContext)\n  const [checked, setChecked] = useState(props.checkedToday)\n  const [style] = useState({\n    false: {\n      backgroundColor: \"#E7E7E7\",\n      color: \"black\",\n    },\n    true: {\n      backgroundColor: \"#86AE5B\",\n      color: \"black\",\n    },\n  })\n\n  useEffect(() => {\n    setChecked(props.checkedToday)\n  }, [props.checkedToday])\n\n  const toggleCheck = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    switch (checked) {\n      case false:\n        setChecked(true)\n        setCheckedHabitIds([...checkedHabitIds, parseInt(e.currentTarget.id)])\n        break\n\n      case true:\n        setChecked(false)\n        let filtered = checkedHabitIds.filter(ele => ele !== parseInt(e.currentTarget.id))\n        setCheckedHabitIds(filtered)\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <button\n      className=\"habit-card-button\"\n      onClick={toggleCheck}\n      id={props.id}\n      style={checked ? style.true : style.false}\n    >\n      {props.name}\n    </button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/habit7-uncheck.d30420f0.png\";","import \"./HabitForm.css\"\nimport { AppContext } from \"../../utils/context\"\nimport { QUERY_HABITS } from \"../../utils/graph_queries\"\nimport { SUBMIT_HABIT } from \"../../utils/graph_mutations\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { useContext, useEffect } from \"react\"\nimport HabitCard from \"../HabitCard/HabitCard\"\nimport \"../../assets/icons/habit7-uncheck.png\"\nimport { Habit } from \"../../utils/Models\"\n\nconst HabitForm = () => {\n  const { loading, error, data } = useQuery(QUERY_HABITS)\n  const { checkedHabitIds, setCheckedHabitIds, todaysHabits } = useContext(AppContext)\n  const [createHabitEntry] = useMutation(SUBMIT_HABIT)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setCheckedHabitIds(todaysHabits.map((ele: Habit) => parseInt(ele.id)))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading, data])\n\n  const createHabitEntries = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const entryParams = checkedHabitIds.map(ele => ({ id: ele }))\n    if (!entryParams.length) {\n      alert(\"No entry today? Tomorrow is another day!\")\n      createHabitEntry({ variables: { idArr: entryParams } })\n    } else {\n      createHabitEntry({ variables: { idArr: entryParams } })\n      alert(\"Great job\")\n    }\n  }\n\n  const displayHabits = () => {\n    return data.fetchHabits.map((habit: Habit) => (\n      <HabitCard\n        name={habit.name}\n        id={habit.id}\n        key={habit.id}\n        checkedToday={checkedHabitIds.includes(parseInt(habit.id))}\n      />\n    ))\n  }\n\n  return (\n    <>\n      {loading && <h2>Loading...</h2>}\n      {error && <h2>{`Error! ${error.message}`}</h2>}\n      <section className=\"habit-form-container\">\n        {todaysHabits.length ? (\n          <h2>Add more habits</h2>\n        ) : (\n          <h2 className=\"habit-form-question\">No check in yet. Go complete some!</h2>\n        )}\n        <form className=\"habit-form\" onSubmit={createHabitEntries}>\n          {data && displayHabits()}\n          <button className=\"habit-submit-button\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </section>\n    </>\n  )\n}\n\nexport default HabitForm\n","import {useQuery} from '@apollo/client'\nimport {useEffect, useState} from 'react'\nimport { QUERY_MONTHLY_ENTRIES } from '../../utils/graph_queries'\nimport './MonthlyGraphs.css'\nimport { Mood } from '../../utils/Models';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js'\nimport { Chart } from 'react-chartjs-2'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n)\n\nconst yLabels = {\n\t 0: '😭',\n   1: '🙁',\n   2: '😐',\n   3: '🙂',\n   4: '😁'\n}\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top' as const,\n    },\n    title: {\n      display: true,\n      text: 'Monthly Moods',\n    },\n  },\n  scales: {\n     yAxis: {\n       ticks: {\n           callback: function(value:string | number):string | undefined {\n               return yLabels[value as keyof typeof yLabels];\n           }\n       }\n     }\n   }\n};\n\nconst MonthlyGraphs = () => {\n  const today = new Date()\n  const monthString = today.toLocaleString('default', { month: 'long' });\n\n  const [ labels, setLabels ] = useState<string[]>([]);\n  const [ monthlyMoods, setMonthlyMoods ] = useState<Mood[]>([]);\n\n  const { loading, data, error } = useQuery(QUERY_MONTHLY_ENTRIES)\n\n  useEffect(() => {\n    if (!loading && data) {\n      const dayLabels = data.fetchUser.monthlyMoods.slice()\n      .sort((a: Mood, b: Mood) => {\n        return parseInt(a.createdAt!.slice(8,10)) - parseInt(b.createdAt!.slice(8,10))\n      })\n      .map((mood: Mood) => {\n          const date = new Date(mood.createdAt!)\n          return new Intl.DateTimeFormat('en-US').format(date)\n      })\n\n      const monthlyMoods = data.fetchUser.monthlyMoods.slice().reverse()\n        .map((mood :Mood) => mood.mood)\n\n      setLabels(dayLabels)\n      setMonthlyMoods(monthlyMoods)\n    }\n  }, [ data, loading ])\n\n   const dataset = {\n      labels,\n      datasets: [\n        {\n          type: 'line' as const,\n          label: 'Moods',\n          borderColor: 'rgb(255, 99, 132)',\n          borderWidth: 2,\n          fill: false,\n          data: monthlyMoods\n        }\n      ]\n    };\n\n\n\n  return (\n    <section className=\"graph-container\">\n      <h3 className=\"month-title\">{monthString}</h3>\n      { !!monthlyMoods.length ? (\n        <Chart type='line' data={dataset}  options={options}/>\n      )\n      :\n      (\n        <h2>There aren't any mood entries for this month yet!</h2>\n      )\n      }\n      { error && <h2>Sorry, something went wrong!</h2>}\n    </section>\n  )\n}\n\nexport default MonthlyGraphs;\n","import \"./Dashboard.css\"\nimport { Link } from \"react-router-dom\"\nimport { useEffect, useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\nimport MonthlyGraphs from \"../MonthlyGraphs/MonthlyGraphs\"\nimport { useQuery } from \"@apollo/client\"\nimport { QUERY_DAILY_ENTRIES } from \"../../utils/graph_queries\"\nimport { Habit } from \"../../utils/Models\"\nimport MoodToday from \"../MoodToday/MoodToday\"\n\nconst Dashboard = () => {\n  const { todaysMood, setTodaysMood, todaysHabits, setTodaysHabits } = useContext(AppContext)\n\n  const { loading, error, data, refetch } = useQuery(QUERY_DAILY_ENTRIES)\n\n  useEffect(() => {\n    refetch()\n    if (!loading && data) {\n      setTodaysMood(data.fetchUser.dailyMood)\n      setTodaysHabits(data.fetchUser.dailyHabits)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading, data])\n\n  const displayHabit = () => {\n    const completedHabits = todaysHabits!.map((habit: Habit) =>\n      <p className=\"completed-habit\" key={habit.id}>\n        <span className=\"material-icons check-icon\">\n          done\n        </span>\n        {habit.name}\n      </p>)\n\n    return completedHabits\n  }\n\n  return (\n    <main>\n      {loading && <h2>Loading...</h2>}\n      {error && <h2>{`Error! ${error.message}`}</h2>}\n      <section className=\"dashboard-container\">\n        <h2 className=\"page-title\">My Dashboard</h2>\n        <div>\n          <p className=\"page-quote\">\"Every action you take is a vote for the type of person you wish to become.\"</p>\n          <p className=\"page-quote author\">― James Clear</p>\n        </div>\n      </section>\n      <article className=\"today-container\">\n        {todaysMood ? <MoodToday /> : <Link to=\"/glow-up-fe/track\">➕ Enter your mood today!</Link>}\n        {todaysHabits.length ? (\n          <div className=\"completed-habits-container\">\n            <h4>Habits I completed:</h4>\n            <div className=\"completed-habits\">\n              {displayHabit()}\n            </div>\n            <Link to=\"/glow-up-fe/track\">➕ Edit habits</Link>\n          </div>\n        ) : (\n          <Link to=\"/glow-up-fe/track\">➕ Enter your habits!</Link>\n        )}\n      </article>\n      <section className=\"week-container\">\n        <h3>This week...</h3>\n      </section>\n      <MonthlyGraphs />\n    </main>\n  )\n}\n\nexport default Dashboard\n","import \"./Journal.css\"\nimport { QUERY_JOURNAL_ENTRIES } from \"../../utils/graph_queries\"\nimport { useQuery } from \"@apollo/client\"\nimport { JournalEntry } from \"../../utils/Models\"\nimport { useEffect, useState } from \"react\"\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nconst Journal = () => {\n  const { loading, data, error } = useQuery(QUERY_JOURNAL_ENTRIES)\n  const [ journalEntries, setJournalEntries ] = useState<JournalEntry[]>([])\n\n  useEffect(() => {\n    if (!loading && data) {\n      setJournalEntries(data.fetchUser.journalEntries)\n    }\n  }, [loading, data])\n\n  const entryCards = journalEntries.map((entry :JournalEntry) => {\n    const date = new Date(entry.date).toLocaleString(\"en-US\")\n    return (\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls={`panel${date}-content`}\n          id={`panel${date}-header`}\n        >\n          <Typography>Journal Entry {date}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n          {entry.content}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n    )\n  })\n\n  return (\n    <section>\n      { loading && <h2>Loading...</h2> }\n      { error && <h2>Oops, something went wrong!</h2> }\n      <div className=\"journal-title-container\">\n        <h1 className=\"journal-title\">My Journal</h1>\n      </div>\n      { entryCards }\n    </section>\n  )\n}\n\nexport default Journal\n","import \"./App.css\"\nimport MoodForm from \"../MoodForm/MoodForm\"\nimport HabitForm from \"../HabitForm/HabitForm\"\nimport Dashboard from \"../Dashboard/Dashboard\"\nimport Journal from \"../Journal/Journal\"\nimport { Routes, Route, NavLink } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>GlowUp</h1>\n        <nav className=\"nav\">\n          <NavLink to=\"glow-up-fe/dashboard\">Dashboard</NavLink>\n          <NavLink to=\"glow-up-fe/track\">Track</NavLink>\n          <NavLink to=\"glow-up-fe/journal\">Journal</NavLink>\n        </nav>\n      </header>\n      <Routes>\n        <Route path=\"glow-up-fe\">\n          <Route index element={<Dashboard />} />\n          <Route\n            path=\"track\"\n            element={\n              <section className=\"trackers-container\">\n                <MoodForm />\n                <HabitForm />\n              </section>\n            }\n          />\n          <Route path=\"dashboard\" element={<Dashboard />} />\n          <Route path=\"journal\" element={<Journal />} />\n        </Route>\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App/App\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\nimport { ContextProvider } from \"./utils/context\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nconst client = new ApolloClient({\n  // uri: \"https://glowup-be.herokuapp.com/graphql\",\n  uri: \"http://localhost:3001/graphql\",\n\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ApolloProvider client={client}>\n        <ContextProvider>\n          <App />\n        </ContextProvider>\n      </ApolloProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}