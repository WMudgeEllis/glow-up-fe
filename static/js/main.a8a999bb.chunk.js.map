{"version":3,"sources":["utils/graph_mutations.js","utils/graph_queries.js","utils/context.tsx","components/MoodToday/MoodToday.tsx","components/Quote/Quote.tsx","components/MoodForm/MoodForm.tsx","components/HabitCard/HabitCard.tsx","assets/icons/habit7-uncheck.png","components/HabitForm/HabitForm.tsx","components/MonthlyGraphs/MonthlyGraphs.tsx","components/WeeklyCard/WeeklyCard.tsx","components/Week/Week.tsx","components/Dashboard/Dashboard.tsx","components/JournalEntryForm/JournalEntryForm.tsx","components/Journal/Journal.tsx","components/Header/Header.tsx","components/App/App.tsx","index.tsx"],"names":["SUBMIT_MOOD","gql","SUBMIT_HABIT","SUBMIT_JOURNAL_ENTRY","QUERY_HABITS","QUERY_DAILY_ENTRIES","QUERY_WEEKLY_ENTRIES","QUERY_MONTHLY_ENTRIES","QUERY_JOURNAL_ENTRIES","AppContext","createContext","checkedHabitIds","setCheckedHabitIds","todaysMood","setTodaysMood","todaysHabits","setTodaysHabits","displayMood","getDayString","habitMap","dailyQueryError","ContextProvider","children","useState","setDailyQueryError","useQuery","loading","error","data","useEffect","fetchUser","dailyMood","dailyHabits","map","ele","parseInt","id","Provider","value","mood","gap","day","Date","valueOf","dd","String","getDate","padStart","mm","getMonth","getFullYear","MoodToday","useContext","date","className","description","Quote","quote","setQuote","author","setAuthor","fetch","then","response","json","content","MoodForm","setMood","setDescription","validateForm","setValidateForm","useMutation","refetchQueries","createMood","onSubmit","e","preventDefault","variables","type","name","onChange","currentTarget","checked","htmlFor","placeholder","HabitCard","props","checkedToday","setChecked","false","backgroundColor","color","true","style","onClick","filtered","filter","HabitForm","createHabitEntry","message","length","entryParams","idArr","alert","fetchHabits","habit","includes","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","yLabels","options","responsive","plugins","legend","position","title","display","text","scales","yAxis","ticks","callback","MonthlyGraphs","monthString","toLocaleString","month","labels","setLabels","monthlyMoods","setMonthlyMoods","dayLabels","slice","sort","a","b","createdAt","Intl","DateTimeFormat","format","reverse","dataset","datasets","label","borderColor","borderWidth","fill","WeeklyCard","habitList","habits","i","habitId","dayString","Week","weeklyStats","setWeeklyStats","stats","Object","keys","forEach","weeklyMoods","find","weeklyHabits","weeklyCards","index","Dashboard","to","top","left","transform","width","height","bgcolor","border","borderRadius","boxShadow","p","JournalEntryForm","React","open","setOpen","handleClose","createJournalEntry","setContent","Button","Modal","onClose","Box","sx","Journal","entryCards","journalEntries","setJournalEntries","entry","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","theme","createTheme","typography","fontFamily","palette","primary","main","pages","Header","anchorElNav","setAnchorElNav","handleCloseNavMenu","ThemeProvider","AppBar","Container","maxWidth","Toolbar","disableGutters","variant","noWrap","component","mr","xs","md","flexGrow","IconButton","size","event","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","page","MenuItem","textAlign","toUpperCase","my","App","path","element","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a8a999bb.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const SUBMIT_MOOD = gql`\n  mutation CreateMood($mood: Int!, $description: String) {\n    createMood(input: { params: { mood: $mood, description: $description } }) {\n      user {\n        id\n      }\n    }\n  }\n`\n\nexport const SUBMIT_HABIT = gql`\n  mutation AddHabitEntries($idArr: [HabitEntryInput!]!) {\n    createHabitEntry(input: { params: $idArr }) {\n      user {\n        dailyHabits {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const SUBMIT_JOURNAL_ENTRY = gql`\n  mutation createJournalEntry($content: String!) {\n    createJournalEntry(input: { params: { content: $content } }) {\n      user {\n        journalEntries {\n          id\n          content\n          date\n        }\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\nexport const QUERY_USER = gql`\n  query fetchUser {\n    fetchUser {\n      id\n      username\n    }\n  }\n`\nexport const QUERY_HABITS = gql`\n  query FetchHabits {\n    fetchHabits {\n      id\n      name\n    }\n  }\n`\nexport const QUERY_DAILY_ENTRIES = gql`\n  query FetchDailyEntries {\n    fetchUser {\n      id\n      dailyMood {\n        id\n        mood\n        description\n      }\n\n      dailyHabits {\n        id\n        name\n      }\n    }\n  }\n`\nexport const QUERY_WEEKLY_ENTRIES = gql`\n  query fetchWeeklyEntries {\n    fetchUser {\n      weeklyHabits {\n        habitId\n        date\n        id\n      }\n      weeklyMoods {\n        createdAt\n        mood\n      }\n    }\n  }\n`\n\nexport const QUERY_MONTHLY_ENTRIES = gql`\n  query fetchMonthlyEntries {\n    fetchUser {\n      id\n      monthlyMoods {\n        id\n        createdAt\n        mood\n      }\n    }\n  }\n`\n\nexport const QUERY_JOURNAL_ENTRIES = gql`\n  query fetchJournalEntries {\n    fetchUser {\n      id\n      journalEntries {\n        id\n        content\n        date\n      }\n    }\n  }\n`\n","import React, { createContext, useState, useEffect } from \"react\"\n\nimport { Habit, Mood, HabitMap } from \"./Models\"\nimport { useQuery, ApolloError } from \"@apollo/client\"\nimport { QUERY_DAILY_ENTRIES } from \"../utils/graph_queries\"\n\ninterface ContextState {\n  checkedHabitIds: number[]\n  setCheckedHabitIds: (habitIds: number[]) => void\n  todaysMood: Mood | null\n  setTodaysMood: (mood: Mood) => void\n  todaysHabits: Habit[]\n  setTodaysHabits: (habits: Habit[]) => void\n  displayMood: (mood: number) => string\n  getDayString: (count: number) => string\n  habitMap: HabitMap | null\n  dailyQueryError: ApolloError | null\n}\n\nconst AppContext = createContext<ContextState>({\n  checkedHabitIds: [],\n  setCheckedHabitIds: () => {},\n  todaysMood: null,\n  setTodaysMood: () => {},\n  todaysHabits: [],\n  setTodaysHabits: () => {},\n  displayMood: () => \"\",\n  getDayString: () => \"\",\n  habitMap: null,\n  dailyQueryError: null,\n})\n\nconst ContextProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [checkedHabitIds, setCheckedHabitIds] = useState<number[]>([])\n\n  const [todaysMood, setTodaysMood] = useState<Mood | null>(null)\n\n  const [todaysHabits, setTodaysHabits] = useState<Habit[]>([])\n\n  const [dailyQueryError, setDailyQueryError] = useState<ApolloError | null>(null)\n\n  const [habitMap] = useState({\n    1: \"Exercise\",\n    2: \"Meditate\",\n    3: \"Floss\",\n    4: \"Brush teeth x2\",\n    5: \"Drink Water\",\n    6: \"Socialize\",\n    7: \"Eat Healthy\",\n    8: \"Wash Dishes\",\n    9: \"Write in Journal\",\n    10: \"Take a Shower\",\n    11: \"Stay off Social Media\",\n    12: \"Make Bed\",\n    13: \"Read\",\n    14: \"Go Outside\",\n    15: \"Plan Tomorrow\",\n  })\n\n  const displayMood = (mood: number) => {\n    switch (mood) {\n      case 0:\n        return \"😭\"\n      case 1:\n        return \"🙁\"\n      case 2:\n        return \"😐\"\n      case 3:\n        return \"🙂\"\n      case 4:\n        return \"😁\"\n\n      default:\n        return \"❓\"\n    }\n  }\n\n  const getDayString = (gap: number) => {\n    // gap is a positive integer, meaning x days before today,0 means today\n    let day = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24 * gap)\n    var dd = String(day.getDate()).padStart(2, \"0\")\n    var mm = String(day.getMonth() + 1).padStart(2, \"0\") //January is 0!\n    var yyyy = day.getFullYear()\n\n    return yyyy + \"-\" + mm + \"-\" + dd\n  }\n\n  const { loading, error, data } = useQuery(QUERY_DAILY_ENTRIES)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setTodaysMood(data.fetchUser.dailyMood)\n      setTodaysHabits(data.fetchUser.dailyHabits)\n      setCheckedHabitIds(data.fetchUser.dailyHabits.map((ele: Habit) => parseInt(ele.id)))\n    } else if (error) {\n      setDailyQueryError(error)\n    }\n  }, [loading, data, error])\n\n  return (\n    <AppContext.Provider\n      value={{\n        checkedHabitIds,\n        setCheckedHabitIds,\n        todaysMood,\n        setTodaysMood,\n        todaysHabits,\n        setTodaysHabits,\n        displayMood,\n        getDayString,\n        habitMap,\n        dailyQueryError,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport { AppContext, ContextProvider }\n","import { useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\nimport \"./MoodToday.css\"\n\nexport default function MoodToday() {\n  const { todaysMood, displayMood, getDayString } = useContext(AppContext)\n  const date = getDayString(0)\n  return (\n    <div className=\"today-mood-container\">\n      <h3>Today: {date}</h3>\n      <p>I am feeling: {displayMood(todaysMood!.mood)}</p>\n      {todaysMood!.description && <p>{todaysMood!.description}</p>}\n      {/* <button>Second Thought?</button>  to add when changing mood fnc is available*/}\n    </div>\n  )\n}\n","import { useState, useEffect } from \"react\"\n\nexport default function Quote() {\n  const [quote, setQuote] = useState(\"\")\n  const [author, setAuthor] = useState(\"\")\n\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/random?maxLength=200\")\n      .then(response => response.json())\n      .then(data => {\n        setQuote(data.content)\n        setAuthor(data.author)\n      })\n  }, [])\n\n  return (\n    <div className=\"quote-container\">\n      <p className=\"quote-prompt\">Feeling down? Here's a quote for you:</p>\n      <p className=\"quote-body\">\n        \"{quote}\" -- {author}\n      </p>\n    </div>\n  )\n}\n","import \"./MoodForm.css\"\nimport { useState, useContext } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { SUBMIT_MOOD } from \"../../utils/graph_mutations\"\nimport { QUERY_DAILY_ENTRIES } from \"../../utils/graph_queries.js\"\nimport { AppContext } from \"../../utils/context\"\nimport MoodToday from \"../MoodToday/MoodToday\"\nimport Quote from \"../Quote/Quote\"\n\nconst MoodForm = () => {\n  const [mood, setMood] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [validateForm, setValidateForm] = useState(true)\n  const [createMood] = useMutation(SUBMIT_MOOD, {\n    refetchQueries: [QUERY_DAILY_ENTRIES, \"FetchDailyEntries\"],\n  })\n  const { todaysMood } = useContext(AppContext)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    if (!mood) {\n      setValidateForm(false)\n    } else {\n      createMood({ variables: { mood: parseInt(mood), description: description } })\n      setValidateForm(true)\n      setMood(\"\")\n      setDescription(\"\")\n    }\n  }\n\n  return (\n    <section className=\"mood-form-container\">\n      {todaysMood ? (\n        <>\n          <MoodToday />\n          {todaysMood!.mood <= 2 ? <Quote /> : null}\n        </>\n      ) : (\n        <form className=\"mood-form\" onSubmit={handleSubmit}>\n          <h2>How are you feeling today?</h2>\n          <div className=\"moods-container\">\n            <input\n              type=\"radio\"\n              aria-label=\"strongly positive\"\n              name=\"mood\"\n              id=\"strongly-positive\"\n              value=\"4\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"4\"}\n            />\n            <label htmlFor=\"strongly-positive\" className=\"mood-label\">\n              😁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"positive\"\n              name=\"mood\"\n              id=\"positive\"\n              value=\"3\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"3\"}\n            />\n            <label htmlFor=\"positive\" className=\"mood-label\">\n              🙂\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"neutral\"\n              name=\"mood\"\n              id=\"neutral\"\n              value=\"2\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"2\"}\n            />\n            <label htmlFor=\"neutral\" className=\"mood-label\">\n              😐\n            </label>\n\n            <input\n              type=\"radio\"\n              aria-label=\"negative\"\n              name=\"mood\"\n              id=\"negative\"\n              value=\"1\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"1\"}\n            />\n            <label htmlFor=\"negative\" className=\"mood-label\">\n              🙁\n            </label>\n            <input\n              type=\"radio\"\n              aria-label=\"strongly negative\"\n              name=\"mood\"\n              id=\"strongly-negative\"\n              value=\"0\"\n              onChange={e => setMood(e.currentTarget.value)}\n              checked={mood === \"0\"}\n            />\n            <label htmlFor=\"strongly-negative\" className=\"mood-label\">\n              😭\n            </label>\n          </div>\n          {!validateForm && <p className=\"error-message\">**Please select your mood today!**</p>}\n          <input\n            type=\"text\"\n            placeholder=\"Describe your mood...\"\n            className=\"mood-description\"\n            value={description}\n            onChange={e => setDescription(e.currentTarget.value)}\n          />\n          <button className=\"mood-submit-button\" type=\"submit\">\n            ✔ submit your mood\n          </button>\n        </form>\n      )}\n    </section>\n  )\n}\n\nexport default MoodForm\n","import \"./HabitCard.css\"\nimport { useState, useContext, useEffect } from \"react\"\nimport { AppContext } from \"../../utils/context\"\n\ninterface HabitCardProps {\n  name: string\n  id: string\n  checkedToday: boolean\n}\n\nexport default function HabitCard(props: HabitCardProps) {\n  const { checkedHabitIds, setCheckedHabitIds } = useContext(AppContext)\n  const [checked, setChecked] = useState(props.checkedToday)\n  const [style] = useState({\n    false: {\n      backgroundColor: \"#E7E7E7\",\n      color: \"black\",\n    },\n    true: {\n      backgroundColor: \"#86AE5B\",\n      color: \"black\",\n    },\n  })\n\n  useEffect(() => {\n    setChecked(props.checkedToday)\n  }, [props.checkedToday])\n\n  const toggleCheck = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    switch (checked) {\n      case false:\n        setChecked(true)\n        setCheckedHabitIds([...checkedHabitIds, parseInt(e.currentTarget.id)])\n        break\n\n      case true:\n        setChecked(false)\n        let filtered = checkedHabitIds.filter(ele => ele !== parseInt(e.currentTarget.id))\n        setCheckedHabitIds(filtered)\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <button\n      className=\"habit-card-button\"\n      onClick={toggleCheck}\n      id={props.id}\n      style={checked ? style.true : style.false}\n    >\n      {props.name}\n    </button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/habit7-uncheck.d30420f0.png\";","import \"./HabitForm.css\"\nimport { AppContext } from \"../../utils/context\"\nimport { QUERY_HABITS, QUERY_DAILY_ENTRIES } from \"../../utils/graph_queries\"\nimport { SUBMIT_HABIT } from \"../../utils/graph_mutations\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { useContext } from \"react\"\nimport HabitCard from \"../HabitCard/HabitCard\"\nimport \"../../assets/icons/habit7-uncheck.png\"\nimport { Habit } from \"../../utils/Models\"\n\nconst HabitForm = () => {\n  const { loading, error, data } = useQuery(QUERY_HABITS)\n  const { checkedHabitIds } = useContext(AppContext)\n  const [createHabitEntry] = useMutation(SUBMIT_HABIT, {\n    refetchQueries: [QUERY_DAILY_ENTRIES, \"FetchDailyEntries\"],\n  })\n\n  const createHabitEntries = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const entryParams = checkedHabitIds.map(ele => ({ id: ele }))\n    if (!entryParams.length) {\n      alert(\"No entry today? Tomorrow is another day!\")\n      createHabitEntry({ variables: { idArr: entryParams } })\n    } else {\n      createHabitEntry({ variables: { idArr: entryParams } })\n      alert(\"Great job\")\n    }\n  }\n\n  const displayHabits = () => {\n    return data.fetchHabits.map((habit: Habit) => (\n      <HabitCard\n        name={habit.name}\n        id={habit.id}\n        key={habit.id}\n        checkedToday={checkedHabitIds.includes(parseInt(habit.id))}\n      />\n    ))\n  }\n\n  return (\n    <>\n      {loading && <h2>Loading...</h2>}\n      {error ? (\n        <h2>{`Error! ${error.message}`}</h2>\n      ) : (\n        <section className=\"habit-form-container\">\n          {checkedHabitIds.length ? (\n            <h2>Add more habits</h2>\n          ) : (\n            <h2 className=\"habit-form-question\">No check in yet. Go complete some!</h2>\n          )}\n          <form className=\"habit-form\" onSubmit={createHabitEntries}>\n            {data && displayHabits()}\n            <button className=\"habit-submit-button\" type=\"submit\">\n              Submit\n            </button>\n          </form>\n        </section>\n      )}\n    </>\n  )\n}\n\nexport default HabitForm\n","import { useQuery } from \"@apollo/client\"\nimport { useEffect, useState } from \"react\"\nimport { QUERY_MONTHLY_ENTRIES } from \"../../utils/graph_queries\"\nimport \"./MonthlyGraphs.css\"\nimport { Mood } from \"../../utils/Models\"\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\"\nimport { Chart } from \"react-chartjs-2\"\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend)\n\nconst yLabels = {\n  0: \"😭\",\n  1: \"🙁\",\n  2: \"😐\",\n  3: \"🙂\",\n  4: \"😁\",\n}\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\" as const,\n    },\n    title: {\n      display: true,\n      text: \"Monthly Moods\",\n    },\n  },\n  scales: {\n    yAxis: {\n      ticks: {\n        callback: function (value: string | number): string | undefined {\n          return yLabels[value as keyof typeof yLabels]\n        },\n      },\n    },\n  },\n}\n\nconst MonthlyGraphs = () => {\n  const today = new Date()\n  const monthString = today.toLocaleString(\"default\", { month: \"long\" })\n\n  const [labels, setLabels] = useState<string[]>([])\n  const [monthlyMoods, setMonthlyMoods] = useState<Mood[]>([])\n\n  const { loading, data, error } = useQuery(QUERY_MONTHLY_ENTRIES)\n\n  useEffect(() => {\n    if (!loading && data) {\n      const dayLabels = data.fetchUser.monthlyMoods\n        .slice()\n        .sort((a: Mood, b: Mood) => {\n          return parseInt(a.createdAt!.slice(8, 10)) - parseInt(b.createdAt!.slice(8, 10))\n        })\n        .map((mood: Mood) => {\n          const date = new Date(mood.createdAt!)\n          return new Intl.DateTimeFormat(\"en-US\").format(date)\n        })\n\n      const monthlyMoods = data.fetchUser.monthlyMoods\n        .slice()\n        .reverse()\n        .map((mood: Mood) => mood.mood)\n\n      setLabels(dayLabels)\n      setMonthlyMoods(monthlyMoods)\n    }\n  }, [data, loading])\n\n  const dataset = {\n    labels,\n    datasets: [\n      {\n        type: \"line\" as const,\n        label: \"Moods\",\n        borderColor: \"rgb(255, 99, 132)\",\n        borderWidth: 2,\n        fill: false,\n        data: monthlyMoods,\n      },\n    ],\n  }\n\n  return (\n    <section className=\"graph-container\">\n      <h3 className=\"month-title\">{monthString}</h3>\n      {!!monthlyMoods.length && <Chart type=\"line\" data={dataset} options={options} />}\n      {!monthlyMoods.length && !error && <h2>There aren't any mood entries for this month yet!</h2>}\n      {error && <h2>Sorry, something went wrong!</h2>}\n    </section>\n  )\n}\n\nexport default MonthlyGraphs\n","import { useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\nimport { HabitEntry } from \"../../utils/Models\"\nimport \"./WeeklyCard.css\"\n\ninterface WeeklyCardProps {\n  mood: number\n  habits: HabitEntry[]\n  dayString: string\n}\n\nexport default function WeeklyCard(props: WeeklyCardProps) {\n  const { displayMood, habitMap } = useContext(AppContext)\n  let habitList;\n\n  if (props.habits.length) {\n    habitList = props.habits.sort().map((habit, i) => {\n      return (\n        <p key={i} className=\"weekly-card-habit\">\n           ✩ {habitMap![parseInt(habit.habitId) as keyof typeof habitMap]}\n        </p>\n      )\n    })\n  }\n\n\n  return (\n    <div className=\"weekly-card\">\n      <h4>{props.dayString}</h4>\n      <p className=\"weekly-card-mood\">Mood: {displayMood(props.mood)} </p>\n      <div>{props.habits.length ? habitList : 'No habit entries for this day.'}</div>\n    </div>\n  )\n}\n","import { useState, useEffect, useContext } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { QUERY_WEEKLY_ENTRIES } from \"../../utils/graph_queries\"\nimport { HabitEntry, Mood } from \"../../utils/Models\"\nimport WeeklyCard from \"../WeeklyCard/WeeklyCard\"\nimport { AppContext } from \"../../utils/context\"\n\nimport \"./Week.css\"\n\ninterface WeeklyStats {\n  [key: string]: DayStat\n}\n\ninterface DayStat {\n  mood: number\n  habits: HabitEntry[]\n}\n\nexport default function Week() {\n  const { loading, error, data } = useQuery(QUERY_WEEKLY_ENTRIES)\n  const [weeklyStats, setWeeklyStats] = useState<WeeklyStats>({})\n  const { getDayString } = useContext(AppContext)\n\n\n  useEffect(() => {\n    if (!loading && data) {\n      let stats: WeeklyStats = {}\n      for (let i = 1; i <= 7; i++) {\n        stats[getDayString(i)] = {\n          mood: 999,\n          habits: []\n        }\n      }\n\n      const last7Days = Object.keys(stats)\n\n      last7Days.forEach(day => {\n        const mood = data.fetchUser.weeklyMoods.find((mood:Mood) => mood.createdAt!.slice(0, 10) === day)\n        const habits = data.fetchUser.weeklyHabits.filter((habit:HabitEntry) => habit.date.slice(0, 10) === day)\n\n        if (mood) {\n          stats[day].mood = mood.mood\n        }\n\n        if (habits.length) {\n          stats[day].habits = habits\n        }\n      })\n\n      setWeeklyStats(stats)\n    }\n  }, [loading, data, getDayString])\n\n  const weeklyCards = Object.keys(weeklyStats).map((ele: string, index: number) => {\n    return (\n        <WeeklyCard mood={weeklyStats[ele].mood} habits={weeklyStats[ele].habits} key={index} dayString={ele} />\n      )\n    }\n  )\n\n  if (loading) {\n    return <h1>Loading</h1>\n  }\n\n  if (error) {\n    return <h1>{error.message}</h1>\n  }\n\n  return <div className=\"weekcard-holder\">{weeklyCards}</div>\n}\n","import \"./Dashboard.css\"\nimport { Link } from \"react-router-dom\"\nimport { useContext } from \"react\"\nimport { AppContext } from \"../../utils/context\"\nimport MonthlyGraphs from \"../MonthlyGraphs/MonthlyGraphs\"\nimport { Habit } from \"../../utils/Models\"\nimport MoodToday from \"../MoodToday/MoodToday\"\nimport Week from \"../Week/Week\"\n\nconst Dashboard = () => {\n  const { todaysMood, todaysHabits } = useContext(AppContext)\n\n  const displayHabit = () => {\n    const completedHabits = todaysHabits!.map((habit: Habit) => (\n      <p className=\"completed-habit\" key={habit.id}>\n        <span className=\"material-icons check-icon\">done</span>\n        {habit.name}\n      </p>\n    ))\n\n    return completedHabits\n  }\n\n  return (\n    <main>\n      <section className=\"dashboard-container\">\n        <h2 className=\"page-title\">My Dashboard</h2>\n        <div>\n          <p className=\"page-quote\">\"Every action you take is a vote for the type of person you wish to become.\"</p>\n          <p className=\"page-quote author\">― James Clear</p>\n        </div>\n      </section>\n      <article className=\"today-container\">\n        {todaysMood ? <MoodToday /> : <Link to=\"/glow-up-fe/track\">➕ Enter your mood today!</Link>}\n        {todaysHabits.length ? (\n          <div className=\"completed-habits-container\">\n            <h4>Habits I completed:</h4>\n            <div className=\"completed-habits\">{displayHabit()}</div>\n            <Link to=\"/glow-up-fe/track\">➕ Edit habits</Link>\n          </div>\n        ) : (\n          <Link to=\"/glow-up-fe/track\">➕ Enter your habits!</Link>\n        )}\n      </article>\n      <section className=\"week-container\">\n        <h3>This week...</h3>\n        <Week />\n      </section>\n      <MonthlyGraphs />\n    </main>\n  )\n}\n\nexport default Dashboard\n","import \"./JournalEntryForm.css\"\nimport { useState } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { SUBMIT_JOURNAL_ENTRY } from \"../../utils/graph_mutations\"\nimport { QUERY_JOURNAL_ENTRIES } from \"../../utils/graph_queries\"\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\n\nconst style = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  height: 350,\n  bgcolor: 'background.paper',\n  border: '2px solid grey',\n  borderRadius: 5,\n  boxShadow: 24,\n  p: 4,\n};\n\n\nconst JournalEntryForm = () => {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const [createJournalEntry] = useMutation(SUBMIT_JOURNAL_ENTRY, {\n    refetchQueries: [\n      QUERY_JOURNAL_ENTRIES,\n      \"fetchJournalEntries\"\n    ]\n  })\n  const [content, setContent] = useState(\"\")\n  const [validateForm, setValidateForm] = useState(true)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    if (!content) {\n      setValidateForm(false)\n    } else {\n      createJournalEntry({ variables: { content: content } })\n      setValidateForm(true)\n      setContent(\"\")\n      handleClose()\n    }\n  }\n\n  return (\n    <section className=\"journal-entry-form-container\">\n      <Button\n        style={{\n          color: \"white\",\n          backgroundColor: \"rgba(220, 79, 61, 0.8)\"\n        }}\n        onClick={handleOpen}\n      >\n        Write in your journal\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"journal-entry\"\n        aria-describedby=\"journal-entry-modal\"\n      >\n        <Box sx={style}>\n          <form className=\"journal-entry-form\" id=\"journal-entry-modal\" onSubmit={handleSubmit}>\n            <h2 id=\"journal-entry\">What's on your mind?</h2>\n            <textarea\n              name=\"journalEntry\"\n              id=\"journalEntryInput\"\n              value={content}\n              onChange={e => setContent(e.currentTarget.value)}\n            ></textarea>\n            {\n              !validateForm && <p>Write something</p>\n            }\n            <button className=\"journal-entry-submit-button\" type=\"submit\">\n              Submit\n            </button>\n          </form>\n        </Box>\n      </Modal>\n\n    </section>\n  )\n}\n\nexport default JournalEntryForm\n","import \"./Journal.css\"\nimport { QUERY_JOURNAL_ENTRIES } from \"../../utils/graph_queries\"\nimport { useQuery } from \"@apollo/client\"\nimport { JournalEntry } from \"../../utils/Models\"\nimport JournalEntryForm from \"../JournalEntryForm/JournalEntryForm\"\nimport { useEffect, useState } from \"react\"\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nconst Journal = () => {\n  const { loading, data, error } = useQuery(QUERY_JOURNAL_ENTRIES)\n  const [ journalEntries, setJournalEntries ] = useState<JournalEntry[]>([])\n\n  useEffect(() => {\n    if (!loading && data) {\n      setJournalEntries(data.fetchUser.journalEntries)\n    }\n  }, [loading, data])\n\n  let entryCards;\n  if (journalEntries.length) {\n    entryCards = journalEntries.map((entry :JournalEntry) => {\n      const date = new Date(entry.date).toLocaleString(\"en-US\")\n      return (\n        <Accordion key={entry.id}>\n        <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls={`panel${entry.id}-content`}\n        id={entry.id}\n        >\n        <Typography>Journal Entry {date}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <Typography>\n        {entry.content}\n        </Typography>\n        </AccordionDetails>\n        </Accordion>\n      )\n    })\n\n  }\n\n  return (\n    <section>\n      <div className=\"journal-title-container\">\n        <h1 className=\"journal-title\">My Journal</h1>\n        <JournalEntryForm/>\n      </div>\n      { entryCards }\n      { loading && <h2>Loading...</h2> }\n      { error && <h2>Oops, something went wrong!</h2> }\n    </section>\n  )\n}\n\nexport default Journal\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { NavLink } from 'react-router-dom';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Quicksand',\n  },\n  palette: {\n    text: {\n      primary: \"#FFFFFF\"\n    },\n    primary: {\n      main: '#658C9B',\n    }\n  }\n});\n\nconst pages = ['dashboard', 'track', 'journal'];\n\nconst Header = () => {\n  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);\n\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h5\"\n            noWrap\n            component=\"div\"\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n          >\n            GlowUp\n          </Typography>\n          <Box sx={{ flexGrow: 0, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <NavLink to={`glow-up-fe/${page}`}>\n                  <MenuItem key={page} onClick={handleCloseNavMenu}>\n                    <Typography\n                      textAlign=\"center\"\n                      sx={{ color: '#658C9B' }}\n                    >\n                      {page.toUpperCase()}\n                    </Typography>\n                  </MenuItem>\n                </NavLink>\n              ))}\n            </Menu>\n          </Box>\n          <Typography\n            variant=\"h5\"\n            noWrap\n            component=\"div\"\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n          >\n            GlowUp\n          </Typography>\n          <Box sx={{ flexGrow: 0, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <NavLink to={`glow-up-fe/${page}`}>\n                <Button\n                  key={page}\n                  onClick={handleCloseNavMenu}\n                  sx={{ my: 2, color: 'white', display: 'block' }}\n                >\n                  {page}\n                </Button>\n              </NavLink>\n            ))}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n    </ThemeProvider>\n\n  );\n};\nexport default Header;\n","import \"./App.css\"\nimport MoodForm from \"../MoodForm/MoodForm\"\nimport HabitForm from \"../HabitForm/HabitForm\"\nimport Dashboard from \"../Dashboard/Dashboard\"\nimport Journal from \"../Journal/Journal\"\nimport Header from \"../Header/Header\"\nimport { Routes, Route } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Routes>\n        <Route path=\"glow-up-fe\">\n          <Route index element={<Dashboard />} />\n          <Route\n            path=\"track\"\n            element={\n              <section className=\"trackers-container\">\n                <MoodForm />\n                <HabitForm />\n              </section>\n            }\n          />\n          <Route path=\"dashboard\" element={<Dashboard />} />\n          <Route path=\"journal\" element={<Journal />} />\n        </Route>\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App/App\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\nimport { ContextProvider } from \"./utils/context\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nconst client = new ApolloClient({\n  uri: \"https://glowup-be.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ApolloProvider client={client}>\n        <ContextProvider>\n          <App />\n        </ContextProvider>\n      </ApolloProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}